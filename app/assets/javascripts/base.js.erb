/**
 * Function unhides logon action button and hides logoff button in
 * agent view.
 * 
 * @param {Object} queue - queue which buttons need to be toggled
 */
function toggle_logon_btn(queue){
    var $actionCell = $('tr[data-queue="' + queue + '"] td.action-col');
    $logonBtnForm = $actionCell.find("input.logon-btn").parents("form");
    $logoffBtnForm = $actionCell.find("input.logoff-btn").parents("form");
    $logonBtnForm.removeClass("hidden");
    $logoffBtnForm.addClass("hidden");    
}

/**
 * Function unhides logoff action button and hides logon button in
 * agent view. 
 * @param {Object} queue - queue which buttons need to be toggled
 */
function toggle_logoff_btn(queue){
    var $actionCell = $('tr[data-queue="' + queue + '"] td.action-col');
    $logonBtnForm = $actionCell.find("input.logon-btn").parents("form");
    $logoffBtnForm = $actionCell.find("input.logoff-btn").parents("form");
    $logoffBtnForm.removeClass("hidden");    
    $logonBtnForm.addClass("hidden");
}

/**
 * Function unhides logoff button for specified queue and agent in 
 * actions menu in manager view.
 * 
 * @param {Object} queue
 * @param {Object} agent
 */
function add_queue_logoff_action(queue, agent){
    var $submenu = $('div.btn-group[data-agent="' + agent + '"] li[data-action="logoff"]');
    
    // Unhide logoff submenu if it is hidden
    if($submenu.hasClass("hidden")){
        $submenu.removeClass('hidden');
    }
    $submenu.find('a[data-queue="' + queue + '"]').parent().removeClass("hidden");
}

/**
 * Function hides logoff button for specified queue and agent in 
 * actions menu in manager view.
 * 
 * @param {Object} queue
 * @param {Object} agent
 */
function remove_queue_logoff_action(queue, agent){
    var $submenu = $('div.btn-group[data-agent="' + agent + '"] li[data-action="logoff"]');
    $submenu.find('a[data-queue="' + queue + '"]').parent().addClass("hidden");
    
    // hide logoff submenu if agent isn't logged to any of the queues
    if($submenu.find("li:not(.hidden)").length == 0){
        $submenu.addClass('hidden');
    }
}

/**
 * Function shows closable notice with specified message and notification
 * level on top of the page.
 * 
 * Available levels: error, info, success
 * 
 * @param {Object} msg - message to display
 * @param {Object} level
 */
function show_notice(msg, level){
    $notice = $('<div class="alert alert-block alert-' + level + '">');
    $notice.append('<button type="button" class="close" data-dismiss="alert">&times;</button>');
    $notice.append(msg);
    $('div#notices').append($notice);
}

/**
 * Function makes ajax request to refresh stats.
 */
function refresh_stats(){    
    var jqxhr =  $.get('<%= Rails.application.routes.url_helpers.manager_refresh_stats_path %>').fail(function() { 
         console.log("Error trying to refresh stats.");
    });
}

/**
 * Function changes the innerHTML of given element with given value
 * and if new value is different than the old one, it highlights
 * the element.
 */
function change_and_highlight(el, val){
    var color = "#ffc40d";
    var timeout = 2000;
    if(el.html() != val)
        el.html(val).effect("highlight", {"color": color}, timeout);
}

/**
 * Entry point
 */
$(document).ready(function(){
    // Connect to pbxis-ws
    pbxis_connect(getCookie("pbxis_ticket"));
    
    // Set stats refresh interval
    <% if Settings.pbxisws[:refresh_interval] > Rails.application.config.cache_store[2][:expires_in].value %>
        var timeout = <%= Settings.pbxisws[:refresh_interval]  %>
    <% else %>
        var timeout = <%= Rails.application.config.cache_store[2][:expires_in].value  %>
    <% end %>
    window.setInterval("refresh_stats()", timeout);
});